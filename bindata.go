// Code generated by go-bindata.
// sources:
// apis/js2015.js
// DO NOT EDIT!

package wbzr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apisJs2015Js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcb\x8e\xdb\xb8\x12\x5d\xcb\x5f\x51\xd7\x30\x60\x09\x71\xe8\x34\x70\x57\xed\xd1\x62\xe2\x64\x66\x37\x69\xa0\x83\xc9\xc2\x30\x04\x36\x55\xb2\xe8\xd0\xa4\x86\xa4\xe2\x36\x1c\xfd\xfb\xa0\xa8\x87\xa5\xce\x03\x59\xcc\xca\x24\x75\xea\x75\xea\xb0\xe8\x2f\xdc\x42\x26\x2c\x72\x8f\x5b\xc5\x9d\x83\x14\x8a\x5a\x0b\x2f\x8d\x86\x38\x81\xeb\x6d\x97\x63\x21\x35\x3e\x58\x53\xa1\xf5\x12\x5d\xec\xb9\x3d\xa0\x5f\x41\x65\x4d\xe5\x02\xd4\x58\x88\xc9\xa1\x84\x14\xde\x6c\x40\xc2\x6f\xed\x47\xa6\x50\x1f\x7c\xb9\x01\xf9\xea\x15\x01\x09\x93\xa3\x13\x56\x56\xde\x58\x48\x5b\xd4\x4e\xee\x37\xa3\x63\x86\xba\x3e\xa1\xe5\x4f\x0a\x21\xfd\xc1\xf9\xd7\xaf\x50\x70\xe5\x70\x62\x27\x8c\x2e\xe4\xa1\xee\x2d\xbd\xad\x71\x03\xb2\x80\x78\xfe\x85\xab\x1a\xe7\x20\xf5\x08\x9e\x8c\x4d\xcf\x56\xfa\x89\xd9\x87\xa7\x23\x0a\xcf\x26\xb5\x5f\x86\xca\x47\x96\x9f\xf1\x32\xde\x27\x1b\x68\xa0\x01\x8b\xbe\xb6\x7a\xc4\xe8\xd6\x68\xe7\x6d\x2d\xbc\xb1\x81\x38\x6f\xc8\xa9\x5b\x81\xf3\xdc\x4b\xf1\xd0\x53\x49\xe9\xde\x3e\x27\xdf\x92\x3f\x72\xc4\x02\xd0\x5f\x2a\x1c\xbb\x4c\xda\x9a\x27\x7e\x7f\xe6\x65\x9a\xc2\xa6\x4f\x7d\x84\xd8\x40\xb3\x81\x26\x4e\x36\xb3\xd9\x50\x50\x26\x48\x34\x5b\xae\xd4\xb6\x44\xf1\x39\x96\xda\x79\xae\x05\xae\xc6\x86\x7d\x41\xff\x1b\x3e\x43\xbf\x30\xc5\x04\x48\x48\x5f\x5a\x73\x06\x8d\x67\xf8\x78\xa9\xf0\xbd\xb5\xc6\xc6\xf3\x2d\xd7\xda\x78\x10\x5c\x29\xe0\x10\x82\x02\x77\xc0\x07\x6a\xe7\x2d\xe3\xa3\xd4\x3e\x3d\xc5\x32\x4f\xe0\x3a\x8b\xae\x57\x59\x00\x7b\x67\x4e\x5c\x6a\xf7\x88\xa2\x69\xe8\x6c\xa1\x50\xbf\x33\x27\x07\xf7\x29\x28\xd4\x2f\x01\xa4\x51\x5e\x42\x0a\xbb\xeb\xd5\x72\x7d\x40\x58\xc8\x15\x2c\x0c\xc1\x27\xd0\xf9\xf5\xba\x30\xe1\x47\x16\xa0\x11\xe2\x4a\xd5\xee\x0e\x16\x32\x81\x3e\x44\xd3\xac\xae\x57\xd4\x79\xd3\x74\x3f\xfb\xcd\x0c\xc2\x2d\x78\x7e\x86\x14\x78\xc9\xa4\xce\xf1\xf9\x43\x11\x9f\xa5\xce\xcd\x99\x29\x23\x38\x15\xc1\x4a\xe3\xbc\xe6\x27\x4c\xc8\x40\x16\xf1\xaf\x40\x21\x4d\xe1\xf5\x1d\x55\x0e\x10\x09\xa3\x9d\x51\xc8\x94\x39\xc4\xf3\x4f\xc6\x90\xb8\x91\x38\x85\x7b\xc8\x43\x15\x60\xd1\x79\x2b\x85\xc7\x7c\x1e\xc2\x40\xd7\x7b\x5a\x07\xa6\x42\xca\xb3\x59\x24\xfb\xa0\x90\xa6\x29\xf8\x52\xba\x2e\x48\xa7\x15\xea\x59\xcb\x7a\x6b\xda\xd5\x28\x68\xa8\x5c\x67\x51\xc7\xf9\x63\xb8\x22\x37\xda\xbb\x7d\xd3\x90\xa7\xef\x70\x7d\xfb\x1e\x45\x51\x20\x9b\xfd\x89\xfe\x2f\x7e\xc2\xa6\x99\xdf\xf7\xfb\x47\x53\x5b\x81\x4d\xb3\x0a\xa8\x2c\xfb\x06\x47\xe7\x6d\x02\x0f\xdc\xf2\x5b\xdb\x17\x86\xb5\x07\x6d\x80\x49\x02\x15\x81\x5e\x00\x42\x0a\x15\xfb\x43\xa2\xca\xbb\x04\x2a\xf6\x37\x0d\x16\xea\xee\x77\x25\xd0\x9b\xf7\x22\x68\xe3\x0c\xcb\x1f\x99\x0d\x85\x8f\xec\xfa\xd5\x98\x5e\x48\x41\xb8\x9d\xcc\xf7\x9d\x46\x68\x12\x98\x82\xce\x53\x58\xd6\xba\xbd\xf4\xf9\xf2\x17\x04\x11\xde\x01\xba\x4c\x2b\x90\xf9\x0a\xe6\x74\xe5\x0a\x53\xeb\x17\xc2\x80\xc1\xe9\xd0\x67\x12\x03\x93\x5a\xfa\xc9\xfb\xe1\x39\x4d\xb9\x36\x70\x48\x2d\x37\xa2\x3e\xa1\xf6\xec\x9f\x1a\xed\xe5\x11\x15\xd2\xb5\x27\x5c\x50\xad\xae\x95\xea\xd1\x3f\x4d\xf4\xbd\x42\x72\x33\x5f\x41\x08\x71\x4b\x94\x66\xbb\x2f\x11\xfa\x40\x7d\xe2\x63\x4d\x87\x94\xa3\x28\x8c\xd8\x30\x1f\xa2\x70\xd9\xb3\x96\xc7\x65\x96\x2d\x5f\x05\x32\xa3\x28\x0a\x2f\x1a\x3d\x4e\xe4\xb7\x07\x07\xcb\x8c\x95\xdc\x7d\x38\xeb\xe1\x4d\x20\x54\x92\x40\xb6\xa3\xc5\x9e\xde\xb4\x76\x15\xfc\x84\x3e\x57\x90\x42\x46\xdb\x06\x50\x39\x84\xea\x65\xc0\x59\x9b\x08\x71\x48\x7c\x6e\xba\x7d\x16\x2e\xd0\x6e\x3f\x69\x01\xdd\xb5\x07\x6b\x4e\xd2\x61\xdc\x13\x1e\xdb\x15\x60\xcf\x1f\xb4\x23\x77\x60\xbc\x44\x9e\x33\xee\x3d\x17\xe5\x63\xc9\x73\x73\xbe\x01\x01\xd6\x6b\x78\x6b\xcd\xd9\xa1\x75\xe0\xc2\x57\x1a\x0e\xe0\xea\xaa\x32\xd6\xc3\x59\xfa\x12\x2a\xa3\x2e\x85\x54\x6a\x30\xa2\xdc\x28\xb3\x21\x44\xfb\x37\xa2\xeb\x4d\xbc\x6c\xdf\xc2\xe5\xd0\x01\x00\xc7\x48\x9b\x90\xc2\xd2\xe3\xb3\x5f\x1f\xf9\x17\xde\x81\xc6\x18\x67\x49\xd2\xcb\xd2\xfb\xca\xdd\xaf\xd7\x22\xd7\x47\xc7\x84\x32\x75\x5e\x28\x6e\x91\x09\x73\x5a\xf3\x23\x7f\x5e\x2b\xf9\xe4\xd6\x67\x7c\x12\xe6\x54\x19\x8d\xda\xbb\xa3\x5b\xdf\xb1\x37\xec\xee\xff\xd3\xe3\xd7\x2e\x7f\x2d\x90\x1d\xdd\x28\xce\x90\xf5\x01\x7d\x97\xb2\x7b\x7b\xf9\xc8\x0f\x34\x31\xe2\x25\xd1\xb5\x4c\x76\x6f\xf6\x8c\x57\x15\xea\x7c\x5b\x4a\x95\xc7\x6e\x52\x8c\xd1\xca\xf0\x7c\xa4\xf8\xb8\x57\x48\x34\xfc\x15\xca\xc1\x14\xf0\x7d\xd9\xff\xae\x54\x50\x7e\x42\x1d\x66\x55\xed\xca\x98\xba\x2a\xe2\x7c\x55\x25\xa3\x40\x00\x36\xce\xc4\x38\x74\xd3\xad\x3a\x21\xb5\x31\xff\xcb\x90\xd3\x80\x6d\xb8\xe6\x36\xd5\x3b\x0d\xb6\x22\x6d\x66\xff\x06\x00\x00\xff\xff\x5f\x54\x2e\xf6\x44\x0a\x00\x00")

func apisJs2015JsBytes() ([]byte, error) {
	return bindataRead(
		_apisJs2015Js,
		"apis/js2015.js",
	)
}

func apisJs2015Js() (*asset, error) {
	bytes, err := apisJs2015JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apis/js2015.js", size: 2628, mode: os.FileMode(420), modTime: time.Unix(1515196035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apis/js2015.js": apisJs2015Js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"apis": &bintree{nil, map[string]*bintree{
		"js2015.js": &bintree{apisJs2015Js, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
