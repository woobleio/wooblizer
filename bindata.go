// Code generated by go-bindata.
// sources:
// apis/js2015.js
// DO NOT EDIT!

package wbzr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apisJs2015Js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x38\x10\x3d\xdb\xbf\x62\x6a\x04\xb5\x84\x3a\x72\x03\xec\x29\x5a\x1d\xda\xb4\xbb\xe8\x65\x1b\x20\xc5\xf6\x60\x18\x02\x43\x8e\x23\xa6\x34\xa9\x25\xa9\x38\x86\xab\xff\xbe\x18\xea\x3b\x4d\x8a\x2e\xb0\x27\x89\xe2\x9b\x99\x37\x33\x8f\x43\x3d\x30\x0b\xb9\x53\x92\xa3\xf8\x62\xde\x59\xcb\x8e\x90\xc1\xae\xd2\xdc\x4b\xa3\x21\x8a\xe1\x34\xac\x02\xec\x93\x47\xcb\xbc\xb1\x11\xb3\x76\x05\x92\x00\xc1\x07\xb3\x16\x32\xd8\x6c\xd3\x66\xa9\x21\x03\x6f\x2b\x6c\x97\x82\xbc\x32\xe5\xba\x35\x42\x06\x95\x16\xb8\x93\x1a\x45\x0a\xde\x1e\x29\x90\xb1\x10\x85\x6d\x09\x19\x30\x6b\x37\x37\xc7\xfd\xad\x51\x89\x6c\x63\x6e\xa3\x78\x05\xb9\x4b\xe1\x55\x14\x02\x44\xb9\x83\x0c\x72\x99\x68\x7c\xf4\x51\x1c\x27\xc2\x68\x8c\xd3\x21\x3a\xb1\x23\x66\x49\x59\xb9\x22\xca\x5d\xf2\xc0\x54\x45\x08\xb9\x83\x48\xc2\xeb\xd7\xcd\xae\x42\x7d\xe7\x0b\xc8\xb2\x8c\x12\xba\xb5\xc8\xbe\xa5\x50\x43\x0d\x9c\x79\x5e\x40\x84\xd6\x06\x4f\xa2\x4f\x2a\x24\x80\xd6\x12\x6c\x27\x35\x53\x8a\x12\x68\xd2\x20\xdf\xaf\x72\x1d\xbc\xcb\xcd\xc2\xa2\xaf\xac\x5e\x6c\xe3\xc9\x2a\x8a\xa7\xa6\x64\x94\x8b\x18\x7c\x61\xcd\x01\x72\x6c\xe2\x37\xe8\x40\x32\x1d\x96\x43\x7b\x86\x1e\x90\x7d\x68\x5f\x22\x5d\x78\xd2\x5e\x4c\x3b\xad\x51\xeb\x02\x95\xc3\x00\x7e\x52\x5a\x90\x1a\x3e\xdf\xde\x23\xf7\x4f\x0d\x9f\xed\x7a\xef\xea\xd4\x32\xd6\x78\x80\x2f\xc7\x12\x3f\x5a\x6b\x6c\xb4\xf8\xa4\x1f\x98\x92\x02\x98\xf7\xb8\x2f\x3d\x78\x03\x02\x9d\xb7\x15\xf7\x95\x45\xd0\x46\x9f\x87\xc8\xb7\x0a\x41\x6a\xe7\x99\xe6\xb8\x08\x5e\xeb\x14\xea\x28\x4e\xe7\xf3\x20\x04\x6e\x91\x79\xbc\x52\xcc\xb9\x97\x75\xd9\xc8\xe8\xda\x9a\x12\xad\x97\xe8\x22\xcf\xec\x1d\xfa\x15\x94\xd6\x94\x2e\x1e\x2b\x8b\x84\xf5\x36\x05\x09\xbf\x37\x9b\x6d\xeb\x53\x90\x6f\xde\x74\x52\x16\xe8\xb8\x95\x25\x15\x25\x6b\x50\x1b\xb9\x4d\x47\x9f\x13\xd4\xd5\xbe\x25\x9f\xbd\xf0\xfd\xfb\xf7\x4e\xef\xa3\x7d\x6e\xf4\x4e\xde\x55\x9d\x65\x23\x25\x6a\xc6\x22\xe8\x72\x41\x4d\x18\xe0\xf1\xd8\xf4\x60\xa5\x9f\x98\x35\xcd\x4a\x26\xb9\x1f\xfb\xcc\x47\x96\xdf\xf0\x38\x5e\xc7\x13\x65\x0d\x15\xbd\x32\xba\xe9\x8f\xb1\xa1\x70\xde\x90\x53\xb7\x02\xe7\x99\x97\xfc\xba\x2b\x25\xd1\x1d\xb6\xe3\x1f\x8b\x3f\x72\x94\x04\xa0\x3f\x96\x38\x76\xd9\x1e\xbf\x89\xdf\x9f\x79\x99\x52\x48\x3b\xea\x23\x44\x3a\xa8\xa6\x4f\x28\xe7\x24\x9a\x2b\xa6\xd4\x55\x81\xfc\x5b\xd4\xa9\x6c\x35\x36\xec\x12\x7a\xd5\x6f\xf7\x6a\x34\xbb\x09\x30\x7e\x49\xe9\x57\x4c\x6b\xe3\x81\x33\xa5\x80\x41\x08\x0a\xcc\x01\xeb\x4b\xdb\xca\x7a\x44\xed\xeb\x6d\x24\x45\x0c\xa7\xf9\xec\x74\x92\x3b\x48\x3e\x98\x3d\x93\xda\xdd\x20\xaf\x6b\xfa\x76\xa6\x50\x7f\x30\x7b\x07\x97\x19\x28\xd4\x4f\x01\xa4\x51\x56\xd0\xb0\x3d\x9d\x2c\xd3\x77\x08\x67\x72\x05\x67\x86\xe0\x13\xe8\xe2\x74\x3a\x33\xe1\x21\x77\xa0\x11\xa2\x52\x55\xee\x02\xce\x64\x0c\x5d\x88\xba\x5e\x9d\x4e\xa8\x45\x5d\xb7\x8f\x6d\x3a\x87\x70\x0a\x1e\x1f\x69\x06\x17\x89\xd4\x02\x1f\x3f\xef\xa2\x83\xd4\xc2\x1c\x12\x65\x38\xa3\x24\x92\xc2\x38\xaf\xd9\x1e\x63\x32\x90\xbb\xe8\x57\xa0\x90\x65\x70\x7e\x41\x99\x03\xcc\xb8\xd1\xce\x28\x4c\x94\xb9\x8b\x16\x5f\x8d\x21\x71\x23\xd5\x14\x2e\x41\x84\x2c\xc0\xd2\xc8\x90\xdc\xa3\x58\x84\x30\xd0\xf6\x9e\xde\x43\xa5\x02\xe5\xf9\x7c\x26\xbb\xa0\x61\x86\xfb\x42\xba\x36\x48\xab\x15\xea\x59\x53\xf5\xc6\xb4\xcd\x91\xd3\x50\x39\xcd\x67\x6d\xcd\x6f\xc2\x11\x19\xca\xde\xae\xeb\x9a\x3c\x3d\x53\xeb\x61\x7f\x36\x9b\x85\x62\x27\x7f\xa2\xff\x8b\xed\xb1\xae\x17\x97\xdd\xfa\xc6\x54\x96\x63\x5d\xaf\x02\x2a\xcf\x7f\xc0\xd1\xf7\x86\xc0\x35\xb3\x6c\x68\xfb\x99\x49\x9a\x0f\x4d\x80\x09\x81\x92\x40\x4f\x00\x81\x42\x99\xfc\x21\x51\x89\x96\x40\x99\xfc\x4d\x83\x85\xba\xfb\xac\x04\x3a\xf3\x4e\x04\x4d\x9c\xfe\xf5\x25\xb3\x3e\xf1\x91\x5d\xf7\x36\x2e\x2f\x64\xc0\xdd\x46\x8a\x6d\xab\x11\x9a\x04\x66\x47\xdf\x33\x58\xf6\xd7\xff\xf2\x17\x04\x11\xee\x01\x3a\x4c\x2b\x90\x62\x05\x0b\x3a\x72\x3b\x53\xe9\x27\xc2\x18\xfd\x53\x74\x44\x48\x0c\x89\xd4\xd2\x4f\xee\x0f\xcf\x68\xca\x35\x81\x03\x35\x61\x78\xb5\x47\xed\x93\x7f\x2a\xb4\xc7\x1b\x54\x48\xc7\x9e\x70\x41\xb5\xba\x52\xaa\x43\xff\x94\xe8\x47\x85\xe4\x66\xb1\x82\x10\x62\x20\x4a\xb3\xdd\x17\x08\x5d\xa0\x8e\xf8\x58\xd3\x81\xf2\x6c\x16\x46\x6c\x98\x0f\xb3\x70\xd8\xf3\xa6\x8e\xcb\x3c\x5f\xbe\x09\xc5\x9c\xcd\x66\xe1\x46\xa3\xcb\x89\xfc\x76\xe0\x60\x99\x27\x05\x73\x9f\x0f\xba\xbf\x13\x08\x15\xc7\x90\x6f\xe8\x65\x4b\x77\x5a\xf3\x16\xfc\x84\x3e\x97\xf4\x17\x45\xcb\xf6\x52\x2f\x9f\x06\x9c\x37\x44\xa8\x86\x54\xcf\xb4\x5d\xe7\xe1\x00\x6d\xb6\x93\x16\xd0\x59\xbb\xb6\x66\x2f\x1d\x46\x5d\xc1\x23\xbb\x02\xec\xea\x07\xcd\xc8\xed\x2b\x5e\x20\x13\x09\xf3\x9e\xf1\xe2\xa6\x60\xc2\x1c\x06\x20\xc0\x7a\x0d\xef\xad\x39\x38\xb4\x0e\x5c\xd8\xa5\xe1\x00\xae\x2a\x4b\x63\x3d\x1c\xa4\x2f\xa0\x34\xea\xb8\x93\x4a\xf5\x46\xc4\x8d\x98\xf5\x21\x9a\xdf\x88\xb6\x37\xd1\xb2\xb9\x0b\x97\x7d\x07\x00\x5c\x42\xda\x84\x0c\x96\x1e\x1f\xfd\xfa\x9e\x3d\xb0\x16\x34\xc6\x38\x4b\x92\x5e\x16\xde\x97\xee\x72\xbd\xe6\x42\xdf\xbb\x84\x2b\x53\x89\x9d\x62\x16\x13\x6e\xf6\x6b\x76\xcf\x1e\xd7\x4a\xde\xba\xf5\x01\x6f\xb9\xd9\x97\x46\xa3\xf6\xee\xde\xad\x2f\x92\xb7\xc9\xc5\x6f\xd3\xcf\xe7\x4e\x9c\x73\x4c\xee\xdd\x28\x4e\xcf\xfa\x0e\x7d\x4b\xd9\xbd\x3f\x7e\x61\x77\x34\x31\xa2\x25\x95\x6b\x19\x6f\xde\x6e\x13\x56\x96\xa8\xc5\x55\x21\x95\x88\xdc\x24\x19\xa3\x95\x61\x62\xa4\xf8\xa8\x53\x48\xd3\xb7\x5c\x4c\xca\x33\xd1\xfc\x3b\xa5\x82\xec\x07\x7f\xf0\xec\xff\x13\x39\x99\xfe\x3e\xe5\xdc\x35\x3f\xda\x24\x01\x1e\x11\x60\x23\xb7\x74\xce\x26\xce\x6c\x94\xf3\x31\xdd\xba\x7d\xeb\xfe\x28\xe7\xff\x91\xe6\xac\x3b\x0e\xff\x0f\xc1\x29\xbd\x86\x5c\x3d\xdc\x1b\xad\xca\x9b\x63\x50\xcf\xff\x0d\x00\x00\xff\xff\xa8\xb7\x4f\x9a\x40\x0d\x00\x00")

func apisJs2015JsBytes() ([]byte, error) {
	return bindataRead(
		_apisJs2015Js,
		"apis/js2015.js",
	)
}

func apisJs2015Js() (*asset, error) {
	bytes, err := apisJs2015JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apis/js2015.js", size: 3392, mode: os.FileMode(420), modTime: time.Unix(1517521499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apis/js2015.js": apisJs2015Js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"apis": &bintree{nil, map[string]*bintree{
		"js2015.js": &bintree{apisJs2015Js, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

