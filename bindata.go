// Code generated by go-bindata.
// sources:
// apis/js2015.js
// DO NOT EDIT!

package wbzr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apisJs2015Js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcf\x6f\xdb\x3a\x12\x3e\xdb\x7f\xc5\xd4\x08\x9e\x25\xd4\x91\x1b\x60\x4f\xd1\xea\xf0\x5e\xda\x5d\xf4\xb2\x0d\x90\x62\x7b\x30\x0c\x81\x21\x47\x11\x53\x9a\xd4\x92\x54\x1c\xc3\xd5\xff\xbe\x18\xea\x77\x9a\x14\x3d\xbc\x93\x44\xf1\x9b\x99\x6f\x66\x3e\x0e\xf5\xc4\x2c\xe4\x4e\x49\x8e\xe2\xab\xf9\xd3\x5a\x76\x82\x0c\x8a\x5a\x73\x2f\x8d\x86\x28\x86\xf3\xb8\x0a\xb0\xcf\x1e\x2d\xf3\xc6\x46\xcc\xda\x0d\x48\x02\x04\x1f\xcc\x5a\xc8\x60\xb7\x4f\xdb\xa5\x86\x0c\xbc\xad\xb1\x5b\x0a\xf2\xca\x94\xeb\xd7\x08\x19\xd4\x5a\x60\x21\x35\x8a\x14\xbc\x3d\x51\x20\x63\x21\x0a\xdb\x12\x32\x60\xd6\xee\xee\x4e\x87\x7b\xa3\x12\xd9\xc5\xdc\x47\xf1\x06\x72\x97\xc2\xbb\x28\x04\x88\x72\x07\x19\xe4\x32\xd1\xf8\xec\xa3\x38\x4e\x84\xd1\x18\xa7\x63\x74\x62\x47\xcc\x92\xaa\x76\x65\x94\xbb\xe4\x89\xa9\x9a\x10\xb2\x80\x48\xc2\x1f\x7f\xb4\xbb\x0a\xf5\x83\x2f\x21\xcb\x32\x4a\xe8\xde\x22\xfb\x9e\x42\x03\x0d\x70\xe6\x79\x09\x11\x5a\x1b\x3c\x89\x21\xa9\x90\x00\x5a\x4b\xb0\x42\x6a\xa6\x14\x25\xd0\xa6\x41\xbe\xdf\xe5\x3a\x78\x97\xbb\x95\x45\x5f\x5b\xbd\xda\xc7\xb3\x55\x14\xcf\x4d\xc9\x28\x17\x31\xf8\xd2\x9a\x23\xe4\xd8\xc6\x6f\xd1\x81\x64\x3a\x2e\xc7\xf6\x8c\x3d\x20\xfb\xd0\xbe\x44\xba\xf0\xa4\xbd\x98\x76\x3a\xa3\xce\x05\x2a\x87\x01\xfc\xa2\xb4\x20\x35\x7c\xb9\x7f\x44\xee\x5f\x1a\xbe\xda\xf5\xc1\xd5\xb9\x63\xac\xf1\x08\x5f\x4f\x15\x7e\xb2\xd6\xd8\x68\xf5\x59\x3f\x31\x25\x05\x30\xef\xf1\x50\x79\xf0\x06\x04\x3a\x6f\x6b\xee\x6b\x8b\xa0\x8d\xbe\x0c\x91\xef\x15\x82\xd4\xce\x33\xcd\x71\x15\xbc\x36\x29\x34\x51\x9c\x2e\x97\x41\x08\xdc\x22\xf3\x78\xa3\x98\x73\x6f\xeb\xb2\x95\xd1\xad\x35\x15\x5a\x2f\xd1\x45\x9e\xd9\x07\xf4\x1b\xa8\xac\xa9\x5c\x3c\x55\x16\x09\xeb\x43\x0a\x12\xfe\xd9\x6e\x76\xad\x4f\x41\xbe\x7f\xdf\x4b\x59\xa0\xe3\x56\x56\x54\x94\xac\x45\xed\xe4\x3e\x9d\x7c\x4e\x50\xd7\x87\x8e\x7c\xf6\xc6\xf7\x1f\x3f\x7a\xbd\x4f\xf6\xb9\xd1\x85\x7c\xa8\x7b\xcb\x56\x4a\xd4\x8c\x55\xd0\xe5\x8a\x9a\x30\xc2\xe3\xa9\xe9\xd1\x4a\x3f\x33\x6b\x9b\x95\xcc\x72\x3f\x0d\x99\x4f\x2c\xbf\xe3\x69\xba\x8e\x67\xca\x1a\x2b\x7a\x63\x74\xdb\x1f\x63\x43\xe1\xbc\x21\xa7\x6e\x03\xce\x33\x2f\xf9\x6d\x5f\x4a\xa2\x3b\x6e\xc7\x3f\x17\x7f\xe2\x28\x09\x40\x7f\xaa\x70\xea\xb2\x3b\x7e\x33\xbf\xbf\xf2\x32\xa7\x90\xf6\xd4\x27\x88\x74\x54\xcd\x90\x50\xce\x49\x34\x37\x4c\xa9\x9b\x12\xf9\xf7\xa8\x57\xd9\x66\x6a\xd8\x27\xf4\x6e\xd8\x1e\xd4\x68\x8a\x19\x30\x7e\x4b\xe9\x37\x4c\x6b\xe3\x81\x33\xa5\x80\x41\x08\x0a\xcc\x01\x1b\x4a\xdb\xc9\x7a\x42\xed\xdb\x7d\x24\x45\x0c\xe7\xe5\xe2\x7c\x96\x05\x24\x1f\xcd\x81\x49\xed\xee\x90\x37\x0d\x7d\xbb\x50\xa8\x3f\x9a\x83\x83\xeb\x0c\x14\xea\x97\x00\xd2\x28\x2b\x69\xd8\x9e\xcf\x96\xe9\x07\x84\x0b\xb9\x81\x0b\x43\xf0\x19\x74\x75\x3e\x5f\x98\xf0\x90\x05\x68\x84\xa8\x52\xb5\xbb\x82\x0b\x19\x43\x1f\xa2\x69\x36\xe7\x33\x6a\xd1\x34\xdd\x63\x9f\x2e\x21\x9c\x82\xe7\x67\x9a\xc1\x65\x22\xb5\xc0\xe7\x2f\x45\x74\x94\x5a\x98\x63\xa2\x0c\x67\x94\x44\x52\x1a\xe7\x35\x3b\x60\x4c\x06\xb2\x88\x7e\x07\x0a\x59\x06\x97\x57\x94\x39\xc0\x82\x1b\xed\x8c\xc2\x44\x99\x87\x68\xf5\xcd\x18\x12\x37\x52\x4d\xe1\x1a\x44\xc8\x02\x2c\x8d\x0c\xc9\x3d\x8a\x55\x08\x03\x5d\xef\xe9\x3d\x54\x2a\x50\x5e\x2e\x17\xb2\x0f\x1a\x66\xb8\x2f\xa5\xeb\x82\x74\x5a\xa1\x9e\xb5\x55\x6f\x4d\xbb\x1c\x39\x0d\x95\xf3\x72\xd1\xd5\xfc\x2e\x1c\x91\xb1\xec\xdd\xba\x69\xc8\xd3\x2b\xb5\x1e\xf7\x17\x8b\x45\x28\x76\xf2\x6f\xf4\xff\x61\x07\x6c\x9a\xd5\x75\xbf\xbe\x33\xb5\xe5\xd8\x34\x9b\x80\xca\xf3\x9f\x70\xf4\xbd\x25\x70\xcb\x2c\x1b\xdb\x7e\x61\x92\xf6\x43\x1b\x60\x46\xa0\x22\xd0\x0b\x40\xa0\x50\x25\xff\x92\xa8\x44\x47\xa0\x4a\xfe\x4b\x83\x85\xba\xfb\xaa\x04\x7a\xf3\x5e\x04\x6d\x9c\xe1\xf5\x2d\xb3\x21\xf1\x89\x5d\xff\x36\x2d\x2f\x64\xc0\xdd\x4e\x8a\x7d\xa7\x11\x9a\x04\xa6\xa0\xef\x19\xac\x87\xeb\x7f\xfd\x1b\x82\x08\xf7\x00\x1d\xa6\x0d\x48\xb1\x81\x15\x1d\xb9\xc2\xd4\xfa\x85\x30\x26\xff\x14\x3d\x11\x12\x43\x22\xb5\xf4\xb3\xfb\xc3\x33\x9a\x72\x6d\xe0\x40\x4d\x18\x5e\x1f\x50\xfb\xe4\x7f\x35\xda\xd3\x1d\x2a\xa4\x63\x4f\xb8\xa0\x5a\x5d\x2b\xd5\xa3\x7f\x49\xf4\x93\x42\x72\xb3\xda\x40\x08\x31\x12\xa5\xd9\xee\x4b\x84\x3e\x50\x4f\x7c\xaa\xe9\x40\x79\xb1\x08\x23\x36\xcc\x87\x45\x38\xec\x79\x5b\xc7\x75\x9e\xaf\xdf\x87\x62\x2e\x16\x8b\x70\xa3\xd1\xe5\x44\x7e\x7b\x70\xb0\xcc\x93\x92\xb9\x2f\x47\x3d\xdc\x09\x84\x8a\x63\xc8\x77\xf4\xb2\xa7\x3b\xad\x7d\x0b\x7e\x42\x9f\x2b\xfa\x8b\xa2\x65\x77\xa9\x57\x2f\x03\x2e\x5b\x22\x54\x43\xaa\x67\xda\xad\xf3\x70\x80\x76\xfb\x59\x0b\xe8\xac\xdd\x5a\x73\x90\x0e\xa3\xbe\xe0\x91\xdd\x00\xf6\xf5\x83\x76\xe4\x0e\x15\x2f\x91\x89\x84\x79\xcf\x78\x79\x57\x32\x61\x8e\x23\x10\x60\xbb\x85\xbf\xac\x39\x3a\xb4\x0e\x5c\xd8\xa5\xe1\x00\xae\xae\x2a\x63\x3d\x1c\xa5\x2f\xa1\x32\xea\x54\x48\xa5\x06\x23\xe2\x46\xcc\x86\x10\xed\x6f\x44\xd7\x9b\x68\xdd\xde\x85\xeb\xa1\x03\x00\x2e\x21\x6d\x42\x06\x6b\x8f\xcf\x7e\xfb\xc8\x9e\x58\x07\x9a\x62\x9c\x25\x49\xaf\x4b\xef\x2b\x77\xbd\xdd\x72\xa1\x1f\x5d\xc2\x95\xa9\x45\xa1\x98\xc5\x84\x9b\xc3\x96\x3d\xb2\xe7\xad\x92\xf7\x6e\x7b\xc4\x7b\x6e\x0e\x95\xd1\xa8\xbd\x7b\x74\xdb\xab\xe4\x43\x72\xf5\x8f\xf9\xe7\x4b\x27\x2e\x39\x26\x8f\x6e\x12\x67\x60\xfd\x80\xbe\xa3\xec\xfe\x3a\x7d\x65\x0f\x34\x31\xa2\x35\x95\x6b\x1d\xef\x3e\xec\x13\x56\x55\xa8\xc5\x4d\x29\x95\x88\xdc\x2c\x19\xa3\x95\x61\x62\xa2\xf8\xa8\x57\xc8\x62\xf8\x15\x12\x60\x0a\x78\x5d\xf6\x7f\x2a\x15\x94\x1f\x53\x87\xdb\x7f\x67\xea\x2a\x8f\xc4\xa6\x8a\x27\x81\x00\x6c\x94\xf3\x69\xe8\xa6\x7b\xeb\xff\x0e\x97\x7f\x77\xc8\x79\xc0\x36\x5c\x33\x4e\xf5\x4e\x83\xad\x48\x9b\xe5\xff\x03\x00\x00\xff\xff\xfb\xd8\x49\x9c\xde\x0c\x00\x00")

func apisJs2015JsBytes() ([]byte, error) {
	return bindataRead(
		_apisJs2015Js,
		"apis/js2015.js",
	)
}

func apisJs2015Js() (*asset, error) {
	bytes, err := apisJs2015JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apis/js2015.js", size: 3294, mode: os.FileMode(420), modTime: time.Unix(1516004288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apis/js2015.js": apisJs2015Js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"apis": &bintree{nil, map[string]*bintree{
		"js2015.js": &bintree{apisJs2015Js, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
